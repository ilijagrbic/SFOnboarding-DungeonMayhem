{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/list\";\nfunction GameComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.continueGame());\n    });\n    i0.ɵɵtext(2, \"Continue Game\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_2_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.startGame());\n    });\n    i0.ɵɵtext(4, \"Start Game\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_2_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.joinGame());\n    });\n    i0.ɵɵtext(6, \"Join Game\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction GameComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"h2\");\n    i0.ɵɵtext(2, \"Start a NEW game:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 7);\n    i0.ɵɵlistener(\"ngSubmit\", function GameComponent_div_3_Template_form_ngSubmit_3_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.startGameRequest());\n    });\n    i0.ɵɵelementStart(4, \"mat-list\")(5, \"mat-list-item\")(6, \"mat-form-field\", 8)(7, \"mat-label\");\n    i0.ɵɵtext(8, \"Number of bots (1-3)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function GameComponent_div_3_Template_input_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.botNo = $event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"mat-list-item\")(11, \"button\", 10);\n    i0.ɵɵtext(12, \"Start\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"mat-list-item\")(14, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_3_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.meni());\n    });\n    i0.ɵɵtext(15, \"Menu\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.botNo);\n  }\n}\nfunction GameComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"h2\");\n    i0.ɵɵtext(2, \"Start an existing game:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 7);\n    i0.ɵɵlistener(\"ngSubmit\", function GameComponent_div_4_Template_form_ngSubmit_3_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.joinGameRequest());\n    });\n    i0.ɵɵelementStart(4, \"mat-list\")(5, \"mat-list-item\")(6, \"mat-form-field\", 8)(7, \"mat-label\");\n    i0.ɵɵtext(8, \"Game ID (ask a fried)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"input\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function GameComponent_div_4_Template_input_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.gameId = $event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"mat-list-item\")(11, \"button\", 10);\n    i0.ɵɵtext(12, \"Join\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"mat-list-item\")(14, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_4_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.meni());\n    });\n    i0.ɵɵtext(15, \"Menu\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.gameId);\n  }\n}\nfunction GameComponent_div_5_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_5_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.meni());\n    });\n    i0.ɵɵtext(1, \"Exit\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameComponent_div_5_div_6_div_8_mat_card_2_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_5_div_6_div_8_mat_card_2_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const i_r27 = i0.ɵɵnextContext().index;\n      const player_r21 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r29.playCard(player_r21.actorId, i_r27, false));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r26 = i0.ɵɵnextContext().$implicit;\n    const ctx_r28 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r28.getPlayText(card_r26, false));\n  }\n}\nfunction GameComponent_div_5_div_6_div_8_mat_card_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-card\", 21)(1, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_5_div_6_div_8_mat_card_2_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r36);\n      const i_r27 = restoredCtx.index;\n      const player_r21 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r34 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r34.playCard(player_r21.actorId, i_r27, true));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"img\", 22);\n    i0.ɵɵtemplate(4, GameComponent_div_5_div_6_div_8_mat_card_2_button_4_Template, 2, 1, \"button\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r26 = ctx.$implicit;\n    const ctx_r25 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r25.getPlayText(card_r26, true));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"ngSrc\", \"assets/\", card_r26.cardName, \".png\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r25.isDamageCard(card_r26));\n  }\n}\nfunction GameComponent_div_5_div_6_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 20);\n    i0.ɵɵtemplate(2, GameComponent_div_5_div_6_div_8_mat_card_2_Template, 5, 3, \"mat-card\", 17);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const player_r21 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", player_r21.deck.hand);\n  }\n}\nfunction GameComponent_div_5_div_6_div_9_mat_card_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 21);\n    i0.ɵɵelement(1, \"img\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const player_r21 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"ngSrc\", \"assets/\", player_r21.characterType, \".png\");\n  }\n}\nfunction GameComponent_div_5_div_6_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 20);\n    i0.ɵɵtemplate(2, GameComponent_div_5_div_6_div_9_mat_card_2_Template, 2, 1, \"mat-card\", 17);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const player_r21 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", player_r21.deck.hand);\n  }\n}\nfunction GameComponent_div_5_div_6_mat_card_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 21);\n    i0.ɵɵelement(1, \"img\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r42 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"ngSrc\", \"assets/\", card_r42.cardName, \".png\");\n  }\n}\nfunction GameComponent_div_5_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"mat-card\")(2, \"mat-card-header\")(3, \"mat-card-title\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-card-subtitle\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"mat-card-content\");\n    i0.ɵɵtemplate(8, GameComponent_div_5_div_6_div_8_Template, 3, 1, \"div\", 19);\n    i0.ɵɵtemplate(9, GameComponent_div_5_div_6_div_9_Template, 3, 1, \"div\", 19);\n    i0.ɵɵelementStart(10, \"div\")(11, \"h3\");\n    i0.ɵɵtext(12, \"In Play:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 20);\n    i0.ɵɵtemplate(14, GameComponent_div_5_div_6_mat_card_14_Template, 2, 1, \"mat-card\", 17);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const player_r21 = ctx.$implicit;\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate4(\"\", ctx_r17.winnerMarker(player_r21), \" \", ctx_r17.onTurnMarker(player_r21), \" \", player_r21.characterType, \" (\", ctx_r17.getPlayerName(player_r21.actorId), \")\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate3(\"Health: \", player_r21.healthPoints, \" Discard pile: \", player_r21.deck.discardPile.length, \" Draw pile: \", player_r21.deck.drawPile.length, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r17.isCurrentPlayer(player_r21.actorId));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r17.isCurrentPlayer(player_r21.actorId));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", player_r21.deck.inPlay);\n  }\n}\nfunction GameComponent_div_5_mat_card_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 21);\n    i0.ɵɵelement(1, \"img\", 24);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r43 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"ngSrc\", \"assets/\", card_r43.cardName, \".png\");\n  }\n}\nfunction GameComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 12)(2, \"div\", 13);\n    i0.ɵɵtemplate(3, GameComponent_div_5_button_3_Template, 2, 0, \"button\", 14);\n    i0.ɵɵelementStart(4, \"h3\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, GameComponent_div_5_div_6_Template, 15, 10, \"div\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 16)(8, \"h2\");\n    i0.ɵɵtext(9, \"Played cards:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, GameComponent_div_5_mat_card_10_Template, 2, 1, \"mat-card\", 17);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.isGameOver());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"In Game: \", ctx_r3.gameId, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.gameModel.playerStates);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.getHistory(ctx_r3.gameModel.playedCards));\n  }\n}\nexport let GameComponent = /*#__PURE__*/(() => {\n  class GameComponent {\n    constructor(http) {\n      this.http = http;\n      this.username = '';\n      this.componentShown = \"meni\";\n      const source = interval(2000);\n      this.subscription = source.subscribe(val => this.refreshGame());\n    }\n    ngOnChanges(changes) {\n      if (changes.username) {\n        console.log('Username changed:', this.username);\n      }\n    }\n    startGame() {\n      this.componentShown = \"start\";\n    }\n    joinGame() {\n      this.componentShown = \"join\";\n    }\n    meni() {\n      this.componentShown = \"meni\";\n    }\n    continueGame() {\n      const body = {\n        gameId: this.gameId\n      };\n      console.log(body);\n      this.http.put(environment.backendHost + 'api/Player/getGame', body).subscribe(response => {\n        this.processGameResponse(response);\n        console.log('Get game response:', this.gameId, this.gameModel);\n      });\n    }\n    startGameRequest() {\n      const body = {\n        username: this.username,\n        botNo: this.botNo\n      };\n      this.http.post(environment.backendHost + 'api/Player/startGame', body).subscribe(response => {\n        this.processGameResponse(response);\n        console.log('Start game response:', this.gameId, this.gameModel);\n      });\n    }\n    joinGameRequest() {\n      const body = {\n        username: this.username,\n        gameId: \"LongKind|\" + this.gameId\n      };\n      this.http.post(environment.backendHost + 'api/Player/joinGame', body).subscribe(response => {\n        this.processGameResponse(response);\n        console.log('Join game response:', this.gameId, this.gameModel);\n      });\n    }\n    playCard(actorId, cardIndex, targetLeft) {\n      const body = {\n        playerId: actorId,\n        cardIndex: cardIndex,\n        targetLeft: targetLeft\n      };\n      this.http.put(environment.backendHost + 'api/Player/playCard', body).subscribe(response => {\n        this.processGameResponse(response);\n        console.log('Play card game response:', this.gameId, this.gameModel);\n      });\n    }\n    isCurrentPlayer(playerActorId) {\n      return 'StringKind|' + this.username === playerActorId;\n    }\n    processGameResponse(response) {\n      this.gameModel = response;\n      this.gameId = this.gameModel[\"gameId\"].split('|')[1];\n      this.componentShown = \"ingame\";\n    }\n    isIngame() {\n      return this.componentShown === \"ingame\";\n    }\n    refreshGame() {\n      if (this.isIngame()) {\n        console.log(\"Trying to refresh game!\");\n        this.continueGame();\n      }\n    }\n    getPlayText(card, target) {\n      var isDamage = this.isDamageCard(card);\n      if (isDamage) {\n        if (target) {\n          return \"Target Up\";\n        } else {\n          return \"Target Down\";\n        }\n      } else {\n        return \"Play\";\n      }\n    }\n    isDamageCard(card) {\n      var isDamage = false;\n      for (var i = 0; i < card.cardEffects.length; i++) {\n        if (card.cardEffects[i].cardEffectType === \"Damage\") {\n          isDamage = true;\n        }\n      }\n      return isDamage;\n    }\n    onTurnMarker(player) {\n      if (this.gameModel.playerStates[this.gameModel.currentTurn].actorId === player.actorId) {\n        return \"[PLAYER ON TURN]\";\n      }\n      return \"\";\n    }\n    isGameOver() {\n      var deadNo = 0;\n      for (var i = 0; i < this.gameModel.playerStates.length; i++) {\n        if (this.gameModel.playerStates[i].healthPoints <= 0) {\n          deadNo++;\n        }\n      }\n      return deadNo > 2;\n    }\n    winnerMarker(player) {\n      if (player.healthPoints > 0 && this.isGameOver()) {\n        return \"[WINNER WINNER]\";\n      }\n      return \"\";\n    }\n    getPlayerName(player) {\n      var parts = player.split(\"|\");\n      if (parts[0] === \"LongKind\") {\n        return \"Bot\";\n      }\n      return parts[1];\n    }\n    getHistory(cards) {\n      return cards.slice(0, 4);\n    }\n    mockReponse() {\n      this.processGameResponse({\n        \"gameId\": \"LongKind|-6486860480432403166\",\n        \"playerStates\": [{\n          \"actorId\": \"LongKind|-1328232499509429184\",\n          \"healthPoints\": 10,\n          \"isBot\": true,\n          \"characterType\": \"Lia\",\n          \"deck\": {\n            \"drawPile\": [{\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Heal\",\n                \"value\": 2\n              }]\n            }],\n            \"discardPile\": [],\n            \"hand\": [{\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Heal\",\n                \"value\": 2\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Heal\",\n                \"value\": 2\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Heal\",\n                \"value\": 2\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Heal\",\n                \"value\": 2\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Heal\",\n                \"value\": 2\n              }]\n            }],\n            \"inPlay\": []\n          }\n        }, {\n          \"actorId\": \"LongKind|-8121273130438575018\",\n          \"healthPoints\": 10,\n          \"isBot\": true,\n          \"characterType\": \"Sutha\",\n          \"deck\": {\n            \"drawPile\": [{\n              \"cardEffects\": [{\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }]\n            }],\n            \"discardPile\": [],\n            \"hand\": [{\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Draw\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 1\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Draw\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 1\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Draw\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 1\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }]\n            }],\n            \"inPlay\": []\n          }\n        }, {\n          \"actorId\": \"StringKind|ttt\",\n          \"healthPoints\": 10,\n          \"isBot\": false,\n          \"characterType\": \"Sutha\",\n          \"deck\": {\n            \"drawPile\": [{\n              \"cardEffects\": [{\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }]\n            }],\n            \"discardPile\": [],\n            \"hand\": [{\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Draw\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 1\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Draw\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 1\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Draw\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 1\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }]\n            }],\n            \"inPlay\": []\n          }\n        }, {\n          \"actorId\": \"LongKind|5829187252721019942\",\n          \"healthPoints\": 10,\n          \"isBot\": true,\n          \"characterType\": \"Sutha\",\n          \"deck\": {\n            \"drawPile\": [{\n              \"cardEffects\": [{\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }]\n            }],\n            \"discardPile\": [],\n            \"hand\": [{\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Draw\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 1\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Draw\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 1\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"Draw\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 1\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }]\n            }, {\n              \"cardEffects\": [{\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }, {\n                \"cardEffectType\": \"ExtraCard\",\n                \"value\": 2\n              }]\n            }],\n            \"inPlay\": []\n          }\n        }],\n        \"currentTurn\": 0\n      });\n    }\n    static #_ = this.ɵfac = function GameComponent_Factory(t) {\n      return new (t || GameComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GameComponent,\n      selectors: [[\"app-game\"]],\n      inputs: {\n        username: \"username\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 6,\n      vars: 5,\n      consts: [[3, \"ngSwitch\"], [\"class\", \"game-actions-container\", 4, \"ngSwitchCase\"], [4, \"ngSwitchCase\"], [1, \"game-actions-container\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\"], [3, \"ngSubmit\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"type\", \"number\", \"name\", \"botNo\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"], [\"matInput\", \"\", \"type\", \"string\", \"name\", \"gameId\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [1, \"container\"], [1, \"left\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"player-container\", 4, \"ngFor\", \"ngForOf\"], [1, \"right\"], [\"class\", \"card\", 4, \"ngFor\", \"ngForOf\"], [1, \"player-container\"], [4, \"ngIf\"], [1, \"card-container\"], [1, \"card\"], [\"width\", \"100\", \"height\", \"160\", \"priority\", \"\", 3, \"ngSrc\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", 4, \"ngIf\"], [\"width\", \"150\", \"height\", \"240\", \"priority\", \"\", 3, \"ngSrc\"]],\n      template: function GameComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0);\n          i0.ɵɵtemplate(2, GameComponent_div_2_Template, 7, 0, \"div\", 1);\n          i0.ɵɵtemplate(3, GameComponent_div_3_Template, 16, 1, \"div\", 1);\n          i0.ɵɵtemplate(4, GameComponent_div_4_Template, 16, 1, \"div\", 1);\n          i0.ɵɵtemplate(5, GameComponent_div_5_Template, 11, 4, \"div\", 2);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngSwitch\", ctx.componentShown);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngSwitchCase\", \"meni\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngSwitchCase\", \"start\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngSwitchCase\", \"join\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngSwitchCase\", \"ingame\");\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf, i2.NgSwitch, i2.NgSwitchCase, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm, i4.MatFormField, i4.MatLabel, i5.MatInput, i6.MatButton, i7.MatCard, i7.MatCardContent, i7.MatCardHeader, i7.MatCardSubtitle, i7.MatCardTitle, i8.MatList, i8.MatListItem, i2.NgOptimizedImage],\n      styles: [\".game-actions-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;justify-content:center;height:50vh;gap:20px}mat-card[_ngcontent-%COMP%]{margin:0}.player-container[_ngcontent-%COMP%]{margin-bottom:0}.card-container[_ngcontent-%COMP%]{display:flex;flex-direction:row;gap:2px}.card[_ngcontent-%COMP%]{width:100px}.container[_ngcontent-%COMP%]{display:flex}.left[_ngcontent-%COMP%]{flex:5;background-color:#add8e6}.right[_ngcontent-%COMP%]{flex:1;background-color:#90ee90}\"]\n    });\n  }\n  return GameComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}